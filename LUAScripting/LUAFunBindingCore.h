/*
 For more information, please see: http://software.sci.utah.edu

 The MIT License

 Copyright (c) 2012 Scientific Computing and Imaging Institute,
 University of Utah.


 Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
 */

// This file is automatically generated

#ifndef TUVOK_LUAFUNBINDING_CORE_H_
#define TUVOK_LUAFUNBINDING_CORE_H_

#include <iomanip>
#include <typeinfo>
#include <sstream>

#include "LUAClassInstance.h"
#include "LUAStackRAII.h"

namespace tuvok
{
// Check prior definitions.
#ifdef EP_INIT
    #error __FILE__ redefines EP_INIT
#endif

#ifdef NM
    #error __FILE__ redefines NM
#endif

#ifdef EP
    #error __FILE__ redefines EP
#endif

#ifdef SG
    #error __FILE__ redefines SG
#endif

#ifdef M_NM
    #error __FILE__ redefines M_NM
#endif

#ifdef MVAR
    #error __FILE__ redefines MVAR
#endif

#ifdef PLP_INIT
    #error __FILE__ redefines PLP_INIT
#endif

#ifdef PLP
    #error __FILE__ redefines PLP
#endif

#ifdef PHP
    #error __FILE__ redefines PHP
#endif

#ifdef MVIT
    #error __FILE__ redefines MVIT
#endif

// These definitions deal with extracting parameters off of the
// LUA stack and storing them in local/member variables to be consumed later.

// The classes below could easily be written without these preprocessor macros,
// but the macros make it easier to replicate the classes when more parameters
// are needed.
#define EP_INIT(idx) int pos = idx; // We are using the __call metamethod, so
                                    // the table associated with the metamethod
                                    // will take the first stack position.

// Variable Name
#define NM(x)       x##_v

// Extract Parameter
#define EP(x)       x NM(x) = LuaStrictStack<x>::get(L, pos++);

// Function signature extraction
#define SG(x)       LuaStrictStack<x>::getTypeStr()

// Member variable name and definition.
#define M_NM(x)     x##_mv
#define MVAR(x)     x M_NM(x)

// Pull parameter from stack into member variable (starts at x -- start index)
#define PLP_INIT(x) int pos = x;
#define PLP(x)      M_NM(x) = LuaStrictStack<x>::get(L, pos++);

// Push parameter from member variable onto the top of the stack.
#define PHP(x)      LuaStrictStack<x>::push(L, M_NM(x));

// Member variable initialization (initialize with the default for that type).
#define MVIT(x)     M_NM(x)(LuaStrictStack<x>::getDefault())

// Abstract base classed used to push and pull parameters off of internal
// undo/redo stacks.
class LuaCFunAbstract
{
public:
  virtual ~LuaCFunAbstract() {}

  virtual void pushParamsToStack(lua_State* L) const      = 0;

  /// Pulls parameters from the stack, starting at the non-pseudo index si.
  /// Does NOT pop the parameters off the stack.
  virtual void pullParamsFromStack(lua_State* L, int si)  = 0;

  /// Returns a string with the formated parameter values in it
  /// e.g. If there were 3 parameters, a boolean, a string, and an int, then
  /// "true, 'hi', 463" would be a possible result of the function.
  virtual std::string getFormattedParameterValues() const = 0;
};


// LUA C function execution base unspecialized template.
template<typename LuaFunExec>
class LuaCFunExec : public LuaCFunAbstract
{
public:
  // We want to keep the run and getSignature functions static so we don't
  // have to initialize member variables for these common operations
  // (we don't know their types).
  static std::string getSigNoReturn(const std::string& funcName);
  static std::string getSignature(const std::string& funcName);
  static void buildTypeTable(lua_State* L);

  // Pushing and pulling parameters from the stack are used to store parameters
  // on the undo / redo stacks within the program.
  virtual void pushParamsToStack(lua_State* L) const;
  virtual void pullParamsFromStack(lua_State* L, int si); // si = starting
                                                          // stack index
  virtual std::string getFormattedParameterValues() const;
};


//------------------
//
// STATIC FUNCTIONS
//
//------------------

// Are return values useful to store alongside the parameters?

//--------------
// 0 PARAMETERS
//--------------
template<typename Ret>
class LuaCFunExec<Ret (*)()> : public LuaCFunAbstract
{
public:
  typedef Ret returnType;
  typedef Ret (*fpType)();
  static Ret run(lua_State*, int, fpType fp)
  {
    return fp();
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "()";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }
  static void constructTypesTable(lua_State* L, int tblIndex)
  {}

  virtual void pushParamsToStack(lua_State*) const   {}
  virtual void pullParamsFromStack(lua_State*, int)  {}
  virtual std::string getFormattedParameterValues() const
  {
    return "";
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    lua_newtable(L);
  }
#endif

};

#define LUAC_MAX_NUM_PARAMS (16)
//---------------
// 1 PARAMETERS
//---------------
template <typename Ret, typename P1>
class LuaCFunExec<Ret (*)(P1)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); 
    return fp(NM(P1));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); 
};

//---------------
// 2 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2>
class LuaCFunExec<Ret (*)(P1, P2)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); 
    return fp(NM(P1), NM(P2));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); 
};

//---------------
// 3 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3>
class LuaCFunExec<Ret (*)(P1, P2, P3)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); 
    return fp(NM(P1), NM(P2), NM(P3));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); 
};

//---------------
// 4 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); 
};

//---------------
// 5 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); 
};

//---------------
// 6 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); 
};

//---------------
// 7 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); 
};

//---------------
// 8 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); 
};

//---------------
// 9 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8, P9)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); 
};

//---------------
// 10 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); 
};

//---------------
// 11 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); 
};

//---------------
// 12 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); 
};

//---------------
// 13 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); EP(P13); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12), NM(P13));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ", " + SG(P13) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12), MVIT(P13) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); PHP(P13); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); PLP(P13); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
        + ", " + LuaStrictStack<P13>::getValStr(M_NM(P13))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P13>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); MVAR(P13); 
};

//---------------
// 14 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); EP(P13); EP(P14); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12), NM(P13), NM(P14));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ", " + SG(P13) + ", " + SG(P14) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12), MVIT(P13), MVIT(P14) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); PHP(P13); PHP(P14); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); PLP(P13); PLP(P14); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
        + ", " + LuaStrictStack<P13>::getValStr(M_NM(P13))
        + ", " + LuaStrictStack<P14>::getValStr(M_NM(P14))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P13>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P14>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); MVAR(P13); MVAR(P14); 
};

//---------------
// 15 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14, typename P15>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); EP(P13); EP(P14); EP(P15); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12), NM(P13), NM(P14), NM(P15));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ", " + SG(P13) + ", " + SG(P14) + ", " + SG(P15) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12), MVIT(P13), MVIT(P14), MVIT(P15) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); PHP(P13); PHP(P14); PHP(P15); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); PLP(P13); PLP(P14); PLP(P15); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
        + ", " + LuaStrictStack<P13>::getValStr(M_NM(P13))
        + ", " + LuaStrictStack<P14>::getValStr(M_NM(P14))
        + ", " + LuaStrictStack<P15>::getValStr(M_NM(P15))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P13>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P14>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P15>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); MVAR(P13); MVAR(P14); MVAR(P15); 
};

//---------------
// 16 PARAMETERS
//---------------
template <typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14, typename P15, typename P16>
class LuaCFunExec<Ret (*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 0;
  typedef Ret returnType;
  typedef Ret (*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16);
  static Ret run(lua_State* L, int paramStackIndex, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); EP(P13); EP(P14); EP(P15); EP(P16); 
    return fp(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12), NM(P13), NM(P14), NM(P15), NM(P16));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ", " + SG(P13) + ", " + SG(P14) + ", " + SG(P15) + ", " + SG(P16) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12), MVIT(P13), MVIT(P14), MVIT(P15), MVIT(P16) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); PHP(P13); PHP(P14); PHP(P15); PHP(P16); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); PLP(P13); PLP(P14); PLP(P15); PLP(P16); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
        + ", " + LuaStrictStack<P13>::getValStr(M_NM(P13))
        + ", " + LuaStrictStack<P14>::getValStr(M_NM(P14))
        + ", " + LuaStrictStack<P15>::getValStr(M_NM(P15))
        + ", " + LuaStrictStack<P16>::getValStr(M_NM(P16))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P13>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P14>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P15>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P16>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); MVAR(P13); MVAR(P14); MVAR(P15); MVAR(P16); 
};


//------------------
//
// MEMBER FUNCTIONS
//
//------------------

//--------------
// 0 PARAMETERS
//--------------
template<typename T, typename Ret>
class LuaCFunExec<Ret (T::*)()> : public LuaCFunAbstract
{
public:
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)();
  static Ret run(lua_State*, int, T* c, fpType fp)
  {
    return (c->*fp)();
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "()";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  virtual std::string getFormattedParameterValues() const
  {
    return "";
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    lua_newtable(L);
  }
#endif

  virtual void pushParamsToStack(lua_State*) const   {}
  virtual void pullParamsFromStack(lua_State*, int)  {}
};

//---------------
// 1 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1>
class LuaCFunExec<Ret (T::*)(P1)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); 
    return (c->*fp)(NM(P1));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); 
};

//---------------
// 2 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2>
class LuaCFunExec<Ret (T::*)(P1, P2)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); 
    return (c->*fp)(NM(P1), NM(P2));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); 
};

//---------------
// 3 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3>
class LuaCFunExec<Ret (T::*)(P1, P2, P3)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); 
};

//---------------
// 4 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); 
};

//---------------
// 5 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); 
};

//---------------
// 6 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); 
};

//---------------
// 7 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); 
};

//---------------
// 8 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); 
};

//---------------
// 9 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8, P9)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); 
};

//---------------
// 10 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); 
};

//---------------
// 11 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); 
};

//---------------
// 12 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); 
};

//---------------
// 13 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); EP(P13); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12), NM(P13));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ", " + SG(P13) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12), MVIT(P13) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); PHP(P13); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); PLP(P13); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
        + ", " + LuaStrictStack<P13>::getValStr(M_NM(P13))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P13>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); MVAR(P13); 
};

//---------------
// 14 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); EP(P13); EP(P14); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12), NM(P13), NM(P14));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ", " + SG(P13) + ", " + SG(P14) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12), MVIT(P13), MVIT(P14) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); PHP(P13); PHP(P14); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); PLP(P13); PLP(P14); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
        + ", " + LuaStrictStack<P13>::getValStr(M_NM(P13))
        + ", " + LuaStrictStack<P14>::getValStr(M_NM(P14))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P13>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P14>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); MVAR(P13); MVAR(P14); 
};

//---------------
// 15 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14, typename P15>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); EP(P13); EP(P14); EP(P15); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12), NM(P13), NM(P14), NM(P15));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ", " + SG(P13) + ", " + SG(P14) + ", " + SG(P15) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12), MVIT(P13), MVIT(P14), MVIT(P15) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); PHP(P13); PHP(P14); PHP(P15); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); PLP(P13); PLP(P14); PLP(P15); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
        + ", " + LuaStrictStack<P13>::getValStr(M_NM(P13))
        + ", " + LuaStrictStack<P14>::getValStr(M_NM(P14))
        + ", " + LuaStrictStack<P15>::getValStr(M_NM(P15))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P13>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P14>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P15>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); MVAR(P13); MVAR(P14); MVAR(P15); 
};

//---------------
// 16 PARAMETERS
//---------------
template <typename T, typename Ret, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14, typename P15, typename P16>
class LuaCFunExec<Ret (T::*)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16)> : public LuaCFunAbstract
{
public:
  static const int memberFunc = 1;
  typedef T classType;
  typedef Ret returnType;
  typedef Ret (T::*fpType)(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16);
  static Ret run(lua_State* L, int paramStackIndex, T* c, fpType fp)
  {
    EP_INIT(paramStackIndex);
            EP(P1); EP(P2); EP(P3); EP(P4); EP(P5); EP(P6); EP(P7); EP(P8); EP(P9); EP(P10); EP(P11); EP(P12); EP(P13); EP(P14); EP(P15); EP(P16); 
    return (c->*fp)(NM(P1), NM(P2), NM(P3), NM(P4), NM(P5), NM(P6), NM(P7), NM(P8), NM(P9), NM(P10), NM(P11), NM(P12), NM(P13), NM(P14), NM(P15), NM(P16));
  }
  static std::string getSigNoReturn(const std::string& funcName)
  {
    return funcName + "(" + SG(P1) + ", " + SG(P2) + ", " + SG(P3) + ", " + SG(P4) + ", " + SG(P5) + ", " + SG(P6) + ", " + SG(P7) + ", " + SG(P8) + ", " + SG(P9) + ", " + SG(P10) + ", " + SG(P11) + ", " + SG(P12) + ", " + SG(P13) + ", " + SG(P14) + ", " + SG(P15) + ", " + SG(P16) + ")";
  }
  static std::string getSignature(const std::string& funcName)
  { return SG(Ret) + " " + getSigNoReturn(funcName); }

  LuaCFunExec()
    : MVIT(P1), MVIT(P2), MVIT(P3), MVIT(P4), MVIT(P5), MVIT(P6), MVIT(P7), MVIT(P8), MVIT(P9), MVIT(P10), MVIT(P11), MVIT(P12), MVIT(P13), MVIT(P14), MVIT(P15), MVIT(P16) {}

  virtual void pushParamsToStack(lua_State* L) const
  { PHP(P1); PHP(P2); PHP(P3); PHP(P4); PHP(P5); PHP(P6); PHP(P7); PHP(P8); PHP(P9); PHP(P10); PHP(P11); PHP(P12); PHP(P13); PHP(P14); PHP(P15); PHP(P16); }
  virtual void pullParamsFromStack(lua_State* L, int si)
  { PLP_INIT(si); PLP(P1); PLP(P2); PLP(P3); PLP(P4); PLP(P5); PLP(P6); PLP(P7); PLP(P8); PLP(P9); PLP(P10); PLP(P11); PLP(P12); PLP(P13); PLP(P14); PLP(P15); PLP(P16); }

  virtual std::string getFormattedParameterValues() const
  {
    return
                 LuaStrictStack<P1>::getValStr(M_NM(P1))
        + ", " + LuaStrictStack<P2>::getValStr(M_NM(P2))
        + ", " + LuaStrictStack<P3>::getValStr(M_NM(P3))
        + ", " + LuaStrictStack<P4>::getValStr(M_NM(P4))
        + ", " + LuaStrictStack<P5>::getValStr(M_NM(P5))
        + ", " + LuaStrictStack<P6>::getValStr(M_NM(P6))
        + ", " + LuaStrictStack<P7>::getValStr(M_NM(P7))
        + ", " + LuaStrictStack<P8>::getValStr(M_NM(P8))
        + ", " + LuaStrictStack<P9>::getValStr(M_NM(P9))
        + ", " + LuaStrictStack<P10>::getValStr(M_NM(P10))
        + ", " + LuaStrictStack<P11>::getValStr(M_NM(P11))
        + ", " + LuaStrictStack<P12>::getValStr(M_NM(P12))
        + ", " + LuaStrictStack<P13>::getValStr(M_NM(P13))
        + ", " + LuaStrictStack<P14>::getValStr(M_NM(P14))
        + ", " + LuaStrictStack<P15>::getValStr(M_NM(P15))
        + ", " + LuaStrictStack<P16>::getValStr(M_NM(P16))
    ;
  }

#ifdef TUVOK_DEBUG_LUA_USE_RTTI_CHECKS
  static void buildTypeTable(lua_State* L)
  {
    int pos = 0;
    lua_newtable(L);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P1>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P2>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P3>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P4>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P5>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P6>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P7>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P8>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P9>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P10>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P11>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P12>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P13>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P14>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P15>(L); lua_settable(L, -3);
    lua_pushinteger(L, pos++); LSS_pushTypeInfo<P16>(L); lua_settable(L, -3);
  }
#endif

  MVAR(P1); MVAR(P2); MVAR(P3); MVAR(P4); MVAR(P5); MVAR(P6); MVAR(P7); MVAR(P8); MVAR(P9); MVAR(P10); MVAR(P11); MVAR(P12); MVAR(P13); MVAR(P14); MVAR(P15); MVAR(P16); 
};


#undef EP_INIT
#undef NM
#undef EP
#undef SG
#undef M_NM
#undef MVAR
#undef PLP_INIT
#undef PLP
#undef PHP
#undef MVIT



} /* namespace tuvok */

#endif /* LUAFUNBINDING_H_ */

